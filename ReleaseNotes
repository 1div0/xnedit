          Release Notes for XNEdit Version 1.0.1, April 2019


This file contains last minute notes to users about the release, which are not
included in the documentation or README files included with the distribution
kits.  It also contains change information, for users who are interested in
what bugs have been fixed, and what features have been added in the current
version.

Changes in XNEdit 1.0 compared to NEdit 5.7

1. New Features

Text rendering

XNEdit has a new Xft-based text renderer, which uses client-side fonts and
supports antialiased text rendering and fallback fonts.

Unicode

Without specific encoding informations, XNEdit assumes that a file is UTF-8
encoded. This is completely independent of the user's locale setting. There are
several ways to load differently encoded files:

 - If the file uses a different unicode encoding and has a byte order mark,
   XNEdit automatically detects the correct encoding.

 - When using the Open File dialog, you can choose the encoding from a list.

 - XNEdit uses an extended attribute for storing encoding informations. If a
   file has an extended attribute with the name "charset" (or "user.charset"
   on Linux), the value is used as the encoding name.

By default, the "charset" attribute is only stored when using non-unicode
encodings. The Save File dialog allows you to choose if you want to store
the attribute.

User Interface

 - Revised Font Selector to work with client-side fonts
 
 - Added new File Selector


2. Bugs fixed

 - Fixed language mode menu rendering issues


3. Removed Features

 - Removed support for many platforms


XNEdit 1.0.1 Update

Changes

This update fixes an encoding conversion bug. Previously, there could be
missing characters in converted files.

Also using XNEdit with non-UTF8 locales is improved. When opening or saving
files, the default encoding is now the locale encoding and not UTF-8.

For a full list of changes, see the CHANGELOG file.

Known issues

With enabled Xft text rendering for Motif widgets, some user interface elements
can only display ASCII characters when using non-UTF8 locales.

The solution is to disable Xft text rendering. This can be done at compile-time
or by changing X resources. The text widget used for editing documents is not
affected.

1. Disable at compile-time

Add -DUSE_XFT=0 to your CFLAGS. This can be done in the platform-specific
Makefile (for example: makefiles/Makefile.linux on Linux).

This does only changes the default X resources.

2. Disable with X resources

Example X resources for using X bitmap fonts for UI elements:

nedit*FontList: \
	-*-helvetica-medium-r-normal-*-14-*-*-*-*-*-iso8859-1, \
	-*-helvetica-bold-r-normal-*-14-*-*-*-*-*-iso8859-1=BOLD, \
	-*-helvetica-medium-o-normal-*-14-*-*-*-*-*-iso8859-1=ITALIC
nedit*XmText.FontList: \
	-*-courier-medium-r-normal-*-14-*-*-*-*-*-iso8859-1, \
	-*-courier-bold-r-normal-*-14-*-*-*-*-*-iso8859-1=BOLD, \
	-*-courier-medium-o-normal-*-14-*-*-*-*-*-iso8859-1=ITALIC
nedit*XmTextField.FontList: \
	-*-courier-medium-r-normal-*-14-*-*-*-*-*-iso8859-1, \
	-*-courier-bold-r-normal-*-14-*-*-*-*-*-iso8859-1=BOLD, \
	-*-courier-medium-o-normal-*-14-*-*-*-*-*-iso8859-1=ITALIC
nedit*XmList.FontList: \
	-*-courier-medium-r-normal-*-14-*-*-*-*-*-iso8859-1, \
	-*-courier-bold-r-normal-*-14-*-*-*-*-*-iso8859-1=BOLD, \
	-*-courier-medium-o-normal-*-14-*-*-*-*-*-iso8859-1=ITALIC
nedit*XmFileSelectionBox*XmList.FontList: \
	-*-courier-medium-r-normal-*-14-*-*-*-*-*-iso8859-1, \
	-*-courier-bold-r-normal-*-14-*-*-*-*-*-iso8859-1=BOLD, \
	-*-courier-medium-o-normal-*-14-*-*-*-*-*-iso8859-1=ITALIC
			


